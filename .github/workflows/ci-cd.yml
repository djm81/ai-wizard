name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: ai-wizard
  ECS_SERVICE: ai-wizard-service
  ECS_CLUSTER: ai-wizard-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: ai-wizard

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    - name: Set up test environment
      run: |
        echo "DATABASE_URL=${{ vars.TEST_DATABASE_URL }}" >> .env
        echo "SECRET_KEY=${{ secrets.DATABASE_SECRET_KEY }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        cp .env .env.test
        cat <<EOF >> backend/app/config/firebase-adminsdk.json
        ${{ secrets.FIREBASE_ADMINSDK_JSON }}
        EOF
    - name: Run tests
      run: |
        poetry run pytest --cov=app tests/
    - name: Upload coverage data to coveralls.io
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install coveralls
        coveralls --service=github

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: 'false'
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Check ECR Login
      run: |
        echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
        echo "ECR Login Output: ${{ steps.login-ecr.outputs.login }}"
        if [ -z "${{ steps.login-ecr.outputs.registry }}" ]; then
          echo "ECR login failed"
          exit 1
        fi
    
    - name: Create ECR repository if not exists
      run: |
        if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" --region ${{ env.AWS_REGION }}; then
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --region ${{ env.AWS_REGION }} --image-scanning-configuration scanOnPush=true --tags Key=Environment,Value=Production || {
            echo "Failed to create ECR repository"
            exit 1
          }
        fi

    - name: Verify Docker Configuration
      run: |
        cat ~/.docker/config.json

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if ! docker build -f backend/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .; then
          echo "Docker build failed"
          exit 1
        fi
        if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG; then
          echo "Docker push failed"
          exit 1
        fi
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      TF_STATE_BUCKET: ai-wizard-terraform-state-${{ env.AWS_REGION }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: 'false'
    
    - name: Get AWS account ID
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

    - name: Create S3 bucket for Terraform state
      run: |
        if ! aws s3 ls "s3://${TF_STATE_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "Terraform state bucket already exists"
        else
          echo "Creating Terraform state bucket"
          aws s3api create-bucket \
            --bucket ${TF_STATE_BUCKET} \
            --region ${AWS_REGION} \
            --create-bucket-configuration LocationConstraint=${AWS_REGION}
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket ${TF_STATE_BUCKET} \
            --versioning-configuration Status=Enabled

          # Enable server-side encryption
          aws s3api put-bucket-encryption \
            --bucket ${TF_STATE_BUCKET} \
            --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'

          # Block public access
          aws s3api put-public-access-block \
            --bucket ${TF_STATE_BUCKET} \
            --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      run: |
        cd backend
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      run: |
        cd backend
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="secret_key=${{ secrets.SECRET_KEY }}" \
          -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
          -var="route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}" \
          -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      run: |
        cd backend
        terraform apply -auto-approve tfplan

    - name: Output application URL
      run: |
        cd backend
        echo "Your application is accessible at: https://$(terraform output -raw domain_name)"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.test.result }} == 'success' && ${{ needs.build-and-push.result }} == 'success' && ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Get ALB DNS Name
      if: steps.check.outputs.status == 'success'
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers --names ai-wizard-alb --query 'LoadBalancers[0].DNSName' --output text)
        echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: |
          ${{ steps.check.outputs.status == 'success' && 'Deployment succeeded! :rocket:' || 'Deployment failed! :x:' }}
          ${{ steps.check.outputs.status == 'success' && format('Application is accessible at: https://{0}', secrets.DOMAIN_NAME) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}