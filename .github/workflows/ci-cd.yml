name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: ai-wizard
  ECS_SERVICE: ai-wizard-service
  ECS_CLUSTER: ai-wizard-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: ai-wizard

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    - name: Set up test environment
      run: |
        echo "DATABASE_URL=${{ vars.TEST_DATABASE_URL }}" >> .env
        echo "SECRET_KEY=${{ secrets.DATABASE_SECRET_KEY }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        cp .env .env.test
        cat <<EOF >> app/config/firebase-adminsdk.json
        ${{ secrets.FIREBASE_ADMINSDK_JSON }}
        EOF
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> frontend/.env
        echo "REACT_APP_GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ vars.FIREBASE_AUTH_DOMAIN }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> frontend/.env
        echo "REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> frontend/.env
        cp frontend/.env frontend/.env.test
    - name: Run tests
      run: |
        poetry run pytest --cov=app tests/
    - name: Upload coverage data to coveralls.io
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install coveralls
        coveralls --service=github

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: 'false'
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Check ECR Login
      run: |
        echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
        echo "ECR Login Output: ${{ steps.login-ecr.outputs.login }}"
        if [ -z "${{ steps.login-ecr.outputs.registry }}" ]; then
          echo "ECR login failed"
          exit 1
        fi
    
    - name: Create ECR repository if not exists
      run: |
        if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" --region ${{ env.AWS_REGION }}; then
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --region ${{ env.AWS_REGION }} --image-scanning-configuration scanOnPush=true --tags Key=Environment,Value=Production || {
            echo "Failed to create ECR repository"
            exit 1
          }
        fi

    - name: Verify Docker Configuration
      run: |
        cat ~/.docker/config.json

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if ! docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .; then
          echo "Docker build failed"
          exit 1
        fi
        if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG; then
          echo "Docker push failed"
          exit 1
        fi
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      ROLE_NAME: ecsTaskExecutionRole-ai-wizard
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: 'false'
    
    - name: Create ECS cluster if not exists
      run: |
        if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query 'clusters[0].[clusterName]' --output text | grep -q ${{ env.ECS_CLUSTER }}; then
          echo "ECS cluster not found. Creating a new one..."
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }} --capacity-providers FARGATE
        else
          echo "ECS cluster ${{ env.ECS_CLUSTER }} already exists."
        fi

    - name: Download or create task definition
      run: |
        # Try to get the existing task definition
        if ! aws ecs describe-task-definition --task-definition ai-wizard --query taskDefinition > task-definition.json; then
          echo "Task definition not found. Creating a new one."
          
          # Create ECS task execution role if it doesn't exist
          if ! aws iam get-role --role-name $ROLE_NAME > /dev/null 2>&1; then
            echo "Creating ECS task execution role..."
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          fi
          
          # Get the role ARN
          EXECUTION_ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query Role.Arn --output text)
          
          # Create the task definition JSON
          cat <<EOF > task-definition.json
        {
          "family": "ai-wizard",
          "executionRoleArn": "$EXECUTION_ROLE_ARN",
          "containerDefinitions": [
            {
              "name": "${{ env.CONTAINER_NAME }}",
              "image": "${{ needs.build-and-push.outputs.image }}",
              "cpu": 256,
              "memory": 512,
              "portMappings": [
                {
                  "containerPort": 8000,
                  "hostPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "essential": true
            }
          ],
          "requiresCompatibilities": [
            "FARGATE"
          ],
          "networkMode": "awsvpc",
          "cpu": "256",
          "memory": "512"
        }
        EOF
        fi
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build-and-push.outputs.image }}
    
    - name: Create ECS service if not exists
      run: |
        if ! aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].[serviceName]' --output text | grep -q ${{ env.ECS_SERVICE }}; then
          echo "ECS service not found. Creating a new one..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.task-def.outputs.task-definition }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345678],securityGroups=[sg-87654321]}"
        else
          echo "ECS service ${{ env.ECS_SERVICE }} already exists."
        fi
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.test.result }} == 'success' && ${{ needs.build-and-push.result }} == 'success' && ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: ${{ steps.check.outputs.status == 'success' && 'Deployment succeeded! :rocket:' || 'Deployment failed! :x:' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}