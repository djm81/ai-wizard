name: Deploy Backend

on:
  push:
    branches:
      - dev
      - test
      - main
    paths:
      - 'backend/terraform/**'
      - '.github/workflows/ci-cd-deploy-backend.yml'
  pull_request:
    branches:
      - test  # PR from dev to test
      - main  # PR from test to main
    paths:
      - 'backend/terraform/**'
      - '.github/workflows/ci-cd-deploy-backend.yml'
  workflow_dispatch:  # Manual trigger

env:
  TF_STATE_BUCKET: ai-wizard-terraform-state-${{ vars.TF_VAR_AWS_REGION }}
  WORKING_DIRECTORY: backend
  ENVIRONMENT: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && 'prod' || github.base_ref) || (github.ref_name == 'main' && 'prod' || github.ref_name) }}
  DOMAIN_NAME: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.base_ref, vars.TF_VAR_DOMAIN_NAME)) || (github.ref_name == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.ref_name, vars.TF_VAR_DOMAIN_NAME)) }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  should_run:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'push' && (
        github.ref == 'refs/heads/dev' ||
        github.ref == 'refs/heads/test' ||
        github.ref == 'refs/heads/main'
      ))
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
      is_deployable: ${{ steps.check.outputs.deployable }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          # Always run for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=true" >> $GITHUB_OUTPUT
          # For PRs, run but don't deploy
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=false" >> $GITHUB_OUTPUT
          # For pushes to main branches, run and deploy
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "deployable=false" >> $GITHUB_OUTPUT
          fi

  plan_and_estimate:
    needs: should_run
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Create Lambda package
      run: |
        chmod +x create_lambda_package.sh
        ./create_lambda_package.sh
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Upload Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: lambda_function
        path: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Calculate Lambda package hash
      id: lambda_hash
      run: |
        HASH=$(openssl dgst -sha256 -binary lambda_package.zip | openssl base64)
        echo "lambda_hash=${HASH}" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Terraform Plan
      id: terraform_plan
      run: |
        terraform plan \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="zappa_deployments_bucket_name=${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Setup Infracost
      id: setup_infracost
      uses: infracost/actions/setup@v3
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost cost estimate
      id: generate_infracost_estimate
      run: |
        infracost breakdown --path . \
                            --format json \
                            --out-file infracost-report.json \
                            --terraform-var "aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
                            --terraform-var "aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
                            --terraform-var "domain_name=${{ env.DOMAIN_NAME }}" \
                            --terraform-var "route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
                            --terraform-var "frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
                            --terraform-var "zappa_deployments_bucket_name=${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}" \
                            --terraform-var "lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
                            --terraform-var "dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
                            --terraform-var "environment=${{ env.ENVIRONMENT }}" \
                            --terraform-var "database_url=${{ vars.PROD_DATABASE_URL }}" \
                            --terraform-var "lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}"
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Upload Infracost cost estimate
      id: upload_infracost_estimate
      run: |
        infracost upload --path=infracost-report.json || echo "Always pass main branch runs even if there are policy failures"
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Upload Terraform plan
      id: upload_terraform_plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ env.ENVIRONMENT }}
        path: ${{ env.WORKING_DIRECTORY }}/terraform/tfplan-${{ env.ENVIRONMENT }}

  deploy:
    needs: [should_run, plan_and_estimate]
    if: |
      needs.should_run.outputs.run_deployment == 'true' &&
      needs.should_run.outputs.is_deployable == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
  
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Download Terraform plan
      id: download_terraform_plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ env.ENVIRONMENT }}
        path: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Download Lambda package
      uses: actions/download-artifact@v4
      with:
        name: lambda_function
        path: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Calculate Lambda package hash
      id: lambda_hash
      run: |
        HASH=$(openssl dgst -sha256 -binary lambda_package.zip | openssl base64)
        echo "lambda_hash=${HASH}" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/lambda
  
    - name: Check and Import Zappa Deployment Bucket
      run: |
        echo "Checking for bucket aws_s3_bucket.zappa_deployments: ${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }}"
        echo "Current Terraform state resources:"
        terraform state list || echo "No resources found in Terraform state."
        
        bucket_exists=false
        if terraform state list aws_s3_bucket.zappa_deployments; then
          if ! terraform state show aws_s3_bucket.zappa_deployments | grep -q "${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }}"; then
            echo "Bucket not found in state."
          else
            echo "Bucket already found in state."
            bucket_exists=true
          fi
        else
          echo "Bucket not found in state."
        fi

        if [ "$bucket_exists" = false ]; then
          echo "Bucket not found, importing..."
          terraform import \
            -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
            -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
            -var="domain_name=${{ env.DOMAIN_NAME }}" \
            -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
            -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
            -var="zappa_deployments_bucket_name=${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}" \
            -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
            -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
            -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
            aws_s3_bucket.zappa_deployments ${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }}
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Apply
      id: terraform_apply
      run: |
        terraform apply -auto-approve tfplan-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Output Application URL
      id: output_application_url
      run: |
        echo "Your application for ${{ env.ENVIRONMENT }} stage is accessible at: $(terraform output -raw website_url)"
        echo "application_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    outputs:
      application_url: ${{ steps.output_application_url.outputs.application_url }}

  notify:
    needs: [should_run, deploy]
    if: always() && needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Check job status
      id: check_job_status
      run: |
        if [[ ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check_job_status.outputs.status }}
        text: |
          ${{ steps.check_job_status.outputs.status == 'success' && format('{0} Deployment succeeded! :rocket:', env.ENVIRONMENT) || format('{0} Deployment failed! :x:', env.ENVIRONMENT) }}
          ${{ steps.check_job_status.outputs.status == 'success' && format('Application for {0} stage is accessible at: {1}', env.ENVIRONMENT, needs.deploy.outputs.application_url) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

