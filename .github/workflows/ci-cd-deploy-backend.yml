name: Backend Deploy Pipeline

on:
  workflow_run:
    workflows: ["Backend Test, Build & Push To ECR Pipeline"]
    types:
      - completed
  push:
    branches: [ main ]
    paths:
      - 'backend/terraform/**'

env:
  ECR_REPOSITORY: ai-wizard
  TF_STATE_BUCKET: ai-wizard-terraform-state-${{ vars.TF_VAR_aws_region }}
  WORKING_DIRECTORY: backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'push' && contains(github.event.head_commit.modified, 'backend/terraform/'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_aws_region }}
        mask-aws-account-id: 'false'
    
    - name: Get AWS account ID
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Get latest image tag from ECR
      run: |
        LATEST_TAG=$(aws ecr describe-images --repository-name ${ECR_REPOSITORY} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Create S3 bucket for Terraform state
      run: |
        if ! aws s3 ls "s3://${TF_STATE_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "Terraform state bucket already exists"
        else
          echo "Creating Terraform state bucket"
          aws s3api create-bucket \
            --bucket ${TF_STATE_BUCKET} \
            --region ${{ vars.TF_VAR_aws_region }} \
            --create-bucket-configuration LocationConstraint=${{ vars.TF_VAR_aws_region }}
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket ${TF_STATE_BUCKET} \
            --versioning-configuration Status=Enabled

          # Enable server-side encryption
          aws s3api put-bucket-encryption \
            --bucket ${TF_STATE_BUCKET} \
            --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'

          # Block public access
          aws s3api put-public-access-block \
            --bucket ${TF_STATE_BUCKET} \
            --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ vars.TF_VAR_aws_region }}"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="aws_region=${{ vars.TF_VAR_aws_region }}" \
          -var="postgres_db_username=${{ secrets.POSTGRES_DB_USERNAME }}" \
          -var="postgres_db_password=${{ secrets.POSTGRES_DB_PASSWORD }}" \
          -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
          -var="route53_zone_id=${{ secrets.ROUTE53_HOSTED_ZONE_ID }}" \
          -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
          -var="ecr_image_tag=${LATEST_TAG}" \
          -var="environment=production" \
          -out=tfplan
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve tfplan
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Output application URL
      run: |
        echo "Your application is accessible at: https://$(terraform output -raw domain_name)"
      working-directory: ${{ env.WORKING_DIRECTORY }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: |
          ${{ steps.check.outputs.status == 'success' && 'Deployment succeeded! :rocket:' || 'Deployment failed! :x:' }}
          ${{ steps.check.outputs.status == 'success' && format('Application is accessible at: https://{0}', secrets.DOMAIN_NAME) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
