name: Deploy Backend

on:
  workflow_run:
    workflows: ["Test and Build Backend"]
    types:
      - completed
  push:
    branches:
      - dev
      - main
    paths:
      - 'backend/terraform/**'
      - '.github/workflows/ci-cd-deploy-backend.yml'

env:
  TF_STATE_BUCKET: ai-wizard-terraform-state-${{ vars.TF_VAR_aws_region }}
  WORKING_DIRECTORY: backend

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  plan_and_estimate:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'push' && (
        contains(github.event.head_commit.modified, 'backend/terraform/') || 
        contains(github.event.head_commit.modified, '.github/workflows/ci-cd-deploy-backend.yml') ||
        github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/dev'
      ))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_aws_region }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_aws_account_id }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ vars.TF_VAR_aws_region }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Plan
      id: terraform_plan
      run: |
        terraform plan \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_aws_region }}" \
          -var="domain_name=${{ vars.TF_VAR_domain_name }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_route53_hosted_zone_id }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_frontend_bucket_name }}" \
          -var="zappa_deployments_bucket_name=${{ vars.TF_VAR_zappa_deployments_bucket_name }}" \
          -var="lambda_function_name=${{ vars.TF_VAR_lambda_function_name }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_dynamodb_table_name }}" \
          -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ vars.TF_VAR_ENVIRONMENT }}" \
          -out=tfplan
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Setup Infracost
      id: setup_infracost
      uses: infracost/actions/setup@v3
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost cost estimate
      id: generate_infracost_estimate
      run: |
        infracost breakdown --path . \
                            --format json \
                            --out-file infracost-report.json \
                            --terraform-var "aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
                            --terraform-var "aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
                            --terraform-var "domain_name=${{ vars.TF_VAR_domain_name }}" \
                            --terraform-var "route53_hosted_zone_id=${{ vars.TF_VAR_route53_hosted_zone_id }}" \
                            --terraform-var "frontend_bucket_name=${{ vars.TF_VAR_frontend_bucket_name }}" \
                            --terraform-var "zappa_deployments_bucket_name=${{ vars.TF_VAR_zappa_deployments_bucket_name }}" \
                            --terraform-var "lambda_function_name=${{ vars.TF_VAR_lambda_function_name }}" \
                            --terraform-var "dynamodb_table_name=${{ vars.TF_VAR_dynamodb_table_name }}" \
                            --terraform-var "environment=${{ vars.TF_VAR_ENVIRONMENT }}" \
                            --terraform-var "openai_api_key=dummy_openai_api_key" \
                            --terraform-var "database_url=${{ vars.PROD_DATABASE_URL }}"

      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Upload Infracost cost estimate
      id: upload_infracost_estimate
      run: |
        infracost upload --path=infracost-report.json || echo "Always pass main branch runs even if there are policy failures"
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Upload Terraform plan
      id: upload_terraform_plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ${{ env.WORKING_DIRECTORY }}/terraform/tfplan

  create_pull_request:
    if: github.ref != 'refs/heads/main'
    needs: plan_and_estimate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create or update pull request
      run: |
        # Check for existing pull requests
        existing_pr=$(gh pr list --base main --head ${{ github.ref_name }} --json state --jq '.[0].state')

        if [ "$existing_pr" == "OPEN" ]; then
          echo "Updating existing pull request..."
          gh pr edit --base main --title "Pull request from ${{ github.ref_name }} to main" --body "Pull request from ${{ github.ref_name }} to main"
        else
          echo "Creating new pull request..."
          gh pr create --base main --title "Pull request from ${{ github.ref_name }} to main" --body "Pull request from ${{ github.ref_name }} to main"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: plan_and_estimate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_aws_region }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_aws_account_id }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'

    - name: Create Lambda package
      run: |
        chmod +x create_lambda_package.sh
        ./create_lambda_package.sh
      working-directory: ${{ env.WORKING_DIRECTORY }}
  
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ vars.TF_VAR_aws_region }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Download Terraform plan
      id: download_terraform_plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Check and Import Zappa Deployment Bucket
      run: |
        echo "Checking for bucket aws_s3_bucket.zappa_deployments: ${{ vars.TF_VAR_zappa_deployments_bucket_name }}"
        echo "Current Terraform state resources:"
        terraform state list
        
        bucket_exists=false
        if terraform state list aws_s3_bucket.zappa_deployments; then
          if ! terraform state show aws_s3_bucket.zappa_deployments | grep -q ${{ vars.TF_VAR_zappa_deployments_bucket_name }}; then
            echo "Bucket not found in state."
          else
            echo "Bucket already found in state."
            bucket_exists=true
          fi
        else
          echo "Bucket not found in state."
        fi

        if [ "$bucket_exists" = false ]; then
          echo "Bucket not found, importing..."
          terraform import \
            -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
            -var="aws_region=${{ vars.TF_VAR_aws_region }}" \
            -var="domain_name=${{ vars.TF_VAR_domain_name }}" \
            -var="route53_hosted_zone_id=${{ vars.TF_VAR_route53_hosted_zone_id }}" \
            -var="frontend_bucket_name=${{ vars.TF_VAR_frontend_bucket_name }}" \
            -var="zappa_deployments_bucket_name=${{ vars.TF_VAR_zappa_deployments_bucket_name }}" \
            -var="lambda_function_name=${{ vars.TF_VAR_lambda_function_name }}" \
            -var="dynamodb_table_name=${{ vars.TF_VAR_dynamodb_table_name }}" \
            -var="environment=${{ vars.TF_VAR_ENVIRONMENT }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
            aws_s3_bucket.zappa_deployments ${{ vars.TF_VAR_zappa_deployments_bucket_name }}
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Apply
      id: terraform_apply
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install
        poetry add zappa

        # Create Zappa settings file if needed
        if [ ! -e "zappa_settings.json" ]; then
          echo "Creating Zappa settings file 'zappa_settings.json' ..."
          cp zappa_settings.json.example zappa_settings.json
          sed -i 's/##aws_region##/${{ vars.TF_VAR_aws_region }}/g' zappa_settings.json
          sed -i 's;##s3_bucket##;${{ vars.TF_VAR_zappa_deployments_bucket_name }};g' zappa_settings.json
          sed -i 's/##project_name##/ai-wizard/g' zappa_settings.json
          sed -i 's/##lambda_function##/${{ vars.TF_VAR_lambda_function_name }}/g' zappa_settings.json
          sed -i 's;##role_arn##;arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/ai-wizard-lambda-exec-role;g' zappa_settings.json
          sed -i 's/##openai_api_key##/${{ secrets.OPENAI_API_KEY }}/g' zappa_settings.json
          sed -i 's;##database_url##;${{ vars.PROD_DATABASE_URL }};g' zappa_settings.json
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Assume IAM Role
      id: assume_role
      run: |
        CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole --role-session-name GithubActions)
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.AccessKeyId)"
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.SecretAccessKey)"
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.SessionToken)"
        echo "aws_access_key_id=$(echo $CREDS | jq -r .Credentials.AccessKeyId)" >> $GITHUB_OUTPUT
        echo "aws_secret_access_key=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_OUTPUT
        echo "aws_session_token=$(echo $CREDS | jq -r .Credentials.SessionToken)" >> $GITHUB_OUTPUT
        echo "role_arn=arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole" >> $GITHUB_OUTPUT

    - name: Deploy with Zappa
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ steps.assume_role.outputs.aws_session_token }}
        AWS_REGION: ${{ vars.TF_VAR_AWS_REGION }}
      run: |
        poetry run zappa update production
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Output Application URL
      id: output_application_url
      run: |
        echo "Your application is accessible at: $(terraform output -raw website_url)"
        echo "application_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    outputs:
      application_url: ${{ steps.output_application_url.outputs.application_url }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      id: check_job_status
      run: |
        if [[ ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check_job_status.outputs.status }}
        text: |
          ${{ steps.check_job_status.outputs.status == 'success' && 'Deployment succeeded! :rocket:' || 'Deployment failed! :x:' }}
          ${{ steps.check_job_status.outputs.status == 'success' && format('Application is accessible at: {0}', needs.deploy.outputs.application_url) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

