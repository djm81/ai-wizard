name: Deploy Backend

on:
  push:
    branches:
      - dev
      - test
      - main
    paths:
      - 'backend/terraform/**'
      - 'backend/app/openapi/**'
      - '.github/workflows/ci-cd-deploy-backend.yml'
  pull_request:
    branches:
      - test  # PR from dev to test
      - main  # PR from test to main
    paths:
      - 'backend/terraform/**'
      - 'backend/app/openapi/**'
      - '.github/workflows/ci-cd-deploy-backend.yml'
  workflow_dispatch:  # Manual trigger

env:
  TF_STATE_BUCKET: ai-wizard-terraform-state-${{ vars.TF_VAR_AWS_REGION }}
  WORKING_DIRECTORY: backend
  ENVIRONMENT: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && 'prod' || github.base_ref) || (github.ref_name == 'main' && 'prod' || github.ref_name) }}
  DOMAIN_NAME: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.base_ref, vars.TF_VAR_DOMAIN_NAME)) || (github.ref_name == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.ref_name, vars.TF_VAR_DOMAIN_NAME)) }}
  DATABASE_URL: ${{ vars.PROD_DATABASE_URL }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  should_run:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'push' && (
        github.ref == 'refs/heads/dev' ||
        github.ref == 'refs/heads/test' ||
        github.ref == 'refs/heads/main'
      ))
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
      is_deployable: ${{ steps.check.outputs.deployable }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          # Always run for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=true" >> $GITHUB_OUTPUT
          # For PRs, run but don't deploy
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=false" >> $GITHUB_OUTPUT
          # For pushes to main branches, run and deploy
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "deployable=false" >> $GITHUB_OUTPUT
          fi

  plan_and_estimate:
    needs: should_run
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
          
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Create Lambda package
      run: |
        chmod +x create_lambda_package.sh
        echo "DATABASE_URL=${DATABASE_URL}" >> .env
        ./create_lambda_package.sh
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Upload Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: lambda_function
        path: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Calculate Lambda package hash
      id: lambda_hash
      run: |
        HASH=$(openssl dgst -sha256 -binary lambda_package.zip | openssl base64)
        echo "lambda_hash=${HASH}" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Terraform Import CloudWatch Log Group
      run: |
        # First try to import existing log group if it exists
        terraform import \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          aws_cloudwatch_log_group.lambda_logs \
          "/aws/lambda/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}-${{ env.ENVIRONMENT }}" || true
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Import API Gateway Certificate
      run: |
        # First try to import existing certificate if it exists
        terraform import \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          aws_acm_certificate.backend_api \
          "arn:aws:acm:${{ vars.TF_VAR_AWS_REGION }}:${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:certificate/*" || true

    - name: Import API Gateway Certificate Validation Records
      run: |
        # Try to import existing validation records if they exist
        terraform import \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          aws_route53_record.backend_api_cert_validation \
          "${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}_api.${{ env.DOMAIN_NAME }}" || true

    - name: Check API Gateway Service Role
      id: check_apigw_role
      run: |
        if aws iam get-role --role-name "AWSServiceRoleForAPIGateway" 2>/dev/null; then
          echo "API Gateway service role exists, will import"
          echo "role_exists=true" >> $GITHUB_OUTPUT
        else
          echo "API Gateway service role does not exist"
          echo "role_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Import API Gateway Service Role if exists
      if: steps.check_apigw_role.outputs.role_exists == 'true'
      continue-on-error: true
      run: |
        terraform import \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          aws_iam_service_linked_role.apigw \
          "arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/aws-service-role/ops.apigateway.amazonaws.com/AWSServiceRoleForAPIGateway" || echo "Import failed, but continuing..."
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Plan CloudWatch Role
      id: terraform_plan_cloudwatch
      run: |
        terraform plan \
          -target=aws_cloudwatch_log_group.api_gw \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-cloudwatch-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Plan Remaining Resources
      id: terraform_plan_remaining
      run: |
        terraform plan \
          -target=aws_lambda_function.api_v2 \
          -target=aws_lambda_alias.api_alias_v2 \
          -target=aws_apigatewayv2_integration.lambda \
          -target=aws_apigatewayv2_domain_name.api \
          -target=aws_apigatewayv2_stage.lambda \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-remaining-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Plan IAM and Logging
      id: terraform_plan_iam_logging
      run: |
        terraform plan \
          -target=aws_iam_role_policy.api_gateway_logging \
          -target=aws_iam_role_policy_attachment.api_gateway_cloudwatch \
          -target=aws_cloudwatch_log_group.api_gw \
          -target=aws_iam_service_linked_role.apigw \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-iam-logging-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Terraform Plan Final
      id: terraform_plan_final
      run: |
        # Create a new plan after IAM changes have been applied
        terraform plan \
          -target=aws_lambda_function.api_v2 \
          -target=aws_lambda_alias.api_alias_v2 \
          -target=aws_apigatewayv2_api.api \
          -target=aws_apigatewayv2_integration.lambda \
          -target=aws_apigatewayv2_stage.lambda \
          -target=aws_apigatewayv2_domain_name.api \
          -target=aws_apigatewayv2_api_mapping.api \
          -target=aws_route53_record.api \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-final-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Upload Terraform Plans
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plans-${{ env.ENVIRONMENT }}
        path: |
          ${{ env.WORKING_DIRECTORY }}/terraform/tfplan-cloudwatch-${{ env.ENVIRONMENT }}
          ${{ env.WORKING_DIRECTORY }}/terraform/tfplan-remaining-${{ env.ENVIRONMENT }}
          ${{ env.WORKING_DIRECTORY }}/terraform/tfplan-iam-logging-${{ env.ENVIRONMENT }}
          ${{ env.WORKING_DIRECTORY }}/terraform/tfplan-final-${{ env.ENVIRONMENT }}

  deploy:
    needs: [should_run, plan_and_estimate]
    if: |
      needs.should_run.outputs.run_deployment == 'true' &&
      needs.should_run.outputs.is_deployable == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
  
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${TF_STATE_BUCKET}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Download Terraform Plans
      uses: actions/download-artifact@v4
      with:
        name: terraform-plans-${{ env.ENVIRONMENT }}
        path: ${{ env.WORKING_DIRECTORY }}/terraform

    - name: Download Lambda package
      uses: actions/download-artifact@v4
      with:
        name: lambda_function
        path: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Calculate Lambda package hash
      id: lambda_hash
      run: |
        HASH=$(openssl dgst -sha256 -binary lambda_package.zip | openssl base64)
        echo "lambda_hash=${HASH}" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/lambda

    - name: Check Lambda Function Status
      id: check_lambda
      run: |
        # Try to get Lambda function info
        if aws lambda get-function \
          --function-name "${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}-${{ env.ENVIRONMENT }}-v2" \
          --query 'Configuration.Handler' \
          --output text 2>/dev/null | grep -q "app.lambda_handler.mangum_handler"; then
          echo "Lambda function exists with app package"
          echo "skip_initial_package=true" >> $GITHUB_OUTPUT
        else
          echo "Lambda function needs initial package or has placeholder"
          echo "skip_initial_package=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    # Move OpenAPI spec handling to before IAM deployment
    - name: Set up Python for OpenAPI
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install OpenAPI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi pyyaml pydantic sqlalchemy mangum python-jose[cryptography] \
          python-multipart email-validator bcrypt pydantic-settings firebase-admin \
          alembic openai psycopg2-binary python-dotenv

    - name: Update OpenAPI Specification
      run: |
        # Ensure terraform api directory exists
        mkdir -p terraform/api
        
        # Copy OpenAPI spec from app to terraform if it exists
        if [ -f "app/openapi/specification.yaml" ]; then
          echo "Using existing OpenAPI specification from app directory"
          cp app/openapi/specification.yaml terraform/api/
        else
          echo "Error: OpenAPI specification.yaml not found in /backend/app/openapi/"
          exit 1
        fi
        
        # Validate spec exists
        if [ ! -f "terraform/api/specification.yaml" ]; then
          echo "Error: OpenAPI specification.yaml not found in backend/terraform/api/"
          exit 1
        fi
        
        # Verify OpenAPI version
        if ! grep -q "^openapi: 3.0.2$" terraform/api/specification.yaml; then
          echo "Error: OpenAPI version is not 3.0.2"
          exit 1
        fi
        
        echo "OpenAPI specification updated successfully"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    # First handle IAM roles and permissions
    - name: Plan and Apply IAM Resources
      id: apply_iam
      run: |
        # Create plan for IAM resources
        TARGETS=""
        if [[ "${{ steps.check_lambda.outputs.skip_initial_package }}" != "true" ]]; then
          TARGETS="-target=aws_lambda_function.api_v2 "
        fi
        
        terraform plan \
          -target=aws_iam_service_linked_role.apigw \
          -target=aws_iam_role.api_gateway_cloudwatch \
          -target=aws_iam_role.lambda_exec \
          -target=aws_iam_role_policy.api_gateway_logging \
          -target=aws_iam_role_policy_attachment.api_gateway_cloudwatch \
          -target=aws_iam_role_policy_attachment.lambda_dynamodb \
          -target=aws_iam_role_policy_attachment.lambda_basic_exec \
          $TARGETS \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-iam-${{ env.ENVIRONMENT }}

        # Apply IAM resources
        terraform apply -auto-approve tfplan-iam-${{ env.ENVIRONMENT }}
        
        # Wait for IAM role propagation
        echo "Waiting for IAM roles to propagate..."
        sleep 30

    # Then handle all other resources
    - name: Plan and Apply Main Infrastructure
      id: apply_main
      run: |
        # Create plan for all remaining resources
        terraform plan \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_hash.outputs.lambda_hash }}" \
          -out=tfplan-main-${{ env.ENVIRONMENT }}

        # Apply all remaining resources
        terraform apply -auto-approve tfplan-main-${{ env.ENVIRONMENT }}

    - name: Terraform Output Application URL
      id: output_application_url
      run: |
        echo "Your application for ${{ env.ENVIRONMENT }} stage is accessible at: $(terraform output -raw website_url)"
        echo "Your API for ${{ env.ENVIRONMENT }} stage is accessible at: https://$(terraform output -raw api_domain)"
        echo "application_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
        echo "api_url=https://$(terraform output -raw api_domain)" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform

    outputs:
      application_url: ${{ steps.output_application_url.outputs.application_url }}
      api_url: ${{ steps.output_application_url.outputs.api_url }}

  notify:
    needs: [should_run, deploy]
    if: always() && needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Check job status
      id: check_job_status
      run: |
        if [[ ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check_job_status.outputs.status }}
        text: |
          ${{ steps.check_job_status.outputs.status == 'success' && format('{0} Deployment succeeded! :rocket:', env.ENVIRONMENT) || format('{0} Deployment failed! :x:', env.ENVIRONMENT) }}
          ${{ steps.check_job_status.outputs.status == 'success' && format('Application for {0} stage is accessible at: {1}', env.ENVIRONMENT, needs.deploy.outputs.application_url) || '' }}
          ${{ steps.check_job_status.outputs.status == 'success' && format('API for {0} stage is accessible at: {1}', env.ENVIRONMENT, needs.deploy.outputs.api_url) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

