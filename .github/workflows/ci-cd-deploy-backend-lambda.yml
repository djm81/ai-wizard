name: Deploy Backend Lambda

on:
  workflow_run:
    workflows: ["Test and Build Backend API"]
    types:
      - completed
    branches:
      - dev
      - test
      - main
  pull_request:
    branches:
      - test  # PR from dev to test
      - main  # PR from test to main
  workflow_dispatch:  # Manual trigger

env:
  WORKING_DIRECTORY: backend
  ENVIRONMENT: ${{ github.ref_name }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  should_run:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'pull_request'
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
    steps:
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

  create_pull_request:
    needs: should_run
    if: |
      needs.should_run.outputs.run_deployment == 'true' &&
      github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create or update pull request
      run: |
        # Check for existing pull requests
        TARGET_BRANCH=""
        if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          TARGET_BRANCH="test"
        elif [ "${{ github.ref }}" = "refs/heads/test" ]; then
          TARGET_BRANCH="main"
        fi
        existing_pr=$(gh pr list --base $TARGET_BRANCH --head ${{ github.ref_name }} --json state --jq '.[0].state')

        if [ "$existing_pr" == "OPEN" ]; then
          echo "Updating existing pull request..."
          gh pr edit --base $TARGET_BRANCH --title "Deploy Lambda: Pull request from ${{ github.ref_name }} to $TARGET_BRANCH" --body "Deploy Lambda: Pull request from ${{ github.ref_name }} to $TARGET_BRANCH"
        else
          echo "Creating new pull request..."
          gh pr create --base $TARGET_BRANCH --title "Deploy Lambda: Pull request from ${{ github.ref_name }} to $TARGET_BRANCH" --body "Deploy Lambda: Pull request from ${{ github.ref_name }} to $TARGET_BRANCH"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_lambda:
    needs: should_run
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
   
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install
        poetry add zappa

        # Create Zappa settings file if needed
        if [ ! -e "zappa_settings.json" ]; then
          echo "Creating Zappa settings file 'zappa_settings.json' ..."
          cp zappa_settings.json.example zappa_settings.json
          sed -i 's/##aws_region##/${{ vars.TF_VAR_AWS_REGION }}/g' zappa_settings.json
          sed -i 's;##s3_bucket##;${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }};g' zappa_settings.json
          sed -i 's/##project_name##/ai-wizard-backend-lambda/g' zappa_settings.json
          sed -i 's/##lambda_name##/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}/g' zappa_settings.json
          sed -i 's/##lambda_function##/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}/g' zappa_settings.json
          sed -i 's;##role_arn##;arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/ai-wizard-lambda-exec-role-${{ env.ENVIRONMENT }};g' zappa_settings.json
          sed -i 's;##database_url##;${{ vars.PROD_DATABASE_URL }};g' zappa_settings.json
        fi

        if [ -e "zappa_settings.json" ]; then
          echo "Zappa settings file 'zappa_settings.json' created or updated."
          cat zappa_settings.json
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Assume IAM Role
      id: assume_role
      run: |
        CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole --role-session-name GithubActions)
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.AccessKeyId)"
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.SecretAccessKey)"
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.SessionToken)"
        echo "aws_access_key_id=$(echo $CREDS | jq -r .Credentials.AccessKeyId)" >> $GITHUB_OUTPUT
        echo "aws_secret_access_key=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_OUTPUT
        echo "aws_session_token=$(echo $CREDS | jq -r .Credentials.SessionToken)" >> $GITHUB_OUTPUT
        echo "role_arn=arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole" >> $GITHUB_OUTPUT

    - name: Deploy with Zappa
      env:
        AWS_ACCESS_KEY_ID: ${{ steps.assume_role.outputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ steps.assume_role.outputs.aws_secret_access_key }}
        AWS_SESSION_TOKEN: ${{ steps.assume_role.outputs.aws_session_token }}
        AWS_REGION: ${{ steps.assume_role.outputs.aws_region }}
      run: |
        # Deploy to appropriate stage based on branch
        STAGE=""
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          STAGE="prod"
        elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          STAGE="dev"
        elif [ "${{ github.ref }}" = "refs/heads/test" ]; then
          STAGE="test"
        else
          echo "Invalid branch: ${{ github.ref }}"
          exit 1
        fi

        echo "Deploying to stage: $STAGE"
        
        if poetry run zappa status $STAGE; then
          echo "Zappa deployment exists. Updating..."
          poetry run zappa update $STAGE
        else
          echo "Zappa deployment does not exist. Performing initial deployment..."
          poetry run zappa deploy $STAGE
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

  notify:
    needs: deploy_lambda
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      id: check_job_status
      run: |
        if [[ ${{ needs.deploy_lambda.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check_job_status.outputs.status }}
        text: |
          ${{ steps.check_job_status.outputs.status == 'success' && '${{ env.ENVIRONMENT }} Lambda deployment succeeded! :rocket:' || '${{ env.ENVIRONMENT }} Lambda deployment failed! :x:' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
