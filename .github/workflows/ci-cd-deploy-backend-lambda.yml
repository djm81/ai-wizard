name: Deploy Backend Lambda

on:
  workflow_run:
    # workflows: ["Test and Build Backend API"]
    # types:
    #   - completed
    # branches:
    #   - dev
    #   - test
    #   - main
  pull_request:
  #   branches:
  #     - test  # PR from dev to test
  #     - main  # PR from test to main
  workflow_dispatch:  # Manual trigger

env:
  WORKING_DIRECTORY: backend
  ENVIRONMENT: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && 'prod' || github.base_ref) || (github.ref_name == 'main' && 'prod' || github.ref_name) }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  should_run:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'workflow_run' && (
        github.event.workflow_run.conclusion == 'success' &&
        (github.ref == 'refs/heads/dev' ||
         github.ref == 'refs/heads/test' ||
         github.ref == 'refs/heads/main')
      ))
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
      is_deployable: ${{ steps.check.outputs.deployable }}
    steps:
      - id: check
        run: |
          # Always run for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=true" >> $GITHUB_OUTPUT
          # For PRs, run but don't deploy
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=false" >> $GITHUB_OUTPUT
          # For workflow_run from Test and Build, run and deploy if successful
          elif [[ "${{ github.event_name }}" == "workflow_run" && "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "deployable=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "deployable=false" >> $GITHUB_OUTPUT
          fi

  deploy_lambda:
    needs: should_run
    if: |
      needs.should_run.outputs.run_deployment == 'true' &&
      needs.should_run.outputs.is_deployable == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
   
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies and configure Zappa
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Install dependencies
        poetry install
        poetry add zappa@latest

        # Create Zappa settings file if needed
        if [ ! -e "zappa_settings.json" ]; then
          echo "Creating Zappa settings file 'zappa_settings.json' ..."
          cp zappa_settings.json.example zappa_settings.json
          sed -i 's/##aws_region##/${{ vars.TF_VAR_AWS_REGION }}/g' zappa_settings.json
          sed -i 's;##s3_bucket##;${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }};g' zappa_settings.json
          sed -i 's/##project_name##/ai-wizard-backend-lambda/g' zappa_settings.json
          sed -i 's/##lambda_name##/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}/g' zappa_settings.json
          sed -i 's/##lambda_function##/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}/g' zappa_settings.json
          sed -i 's;##role_arn##;arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/ai-wizard-lambda-exec-role-${{ env.ENVIRONMENT }};g' zappa_settings.json
          sed -i 's;##database_url##;${{ vars.PROD_DATABASE_URL }};g' zappa_settings.json
        fi

        if [ -e "zappa_settings.json" ]; then
          echo "Zappa settings file 'zappa_settings.json' created or updated."
          cat zappa_settings.json
        fi

    - name: Assume IAM Role
      id: assume_role
      run: |
        CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole --role-session-name GithubActions)
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.AccessKeyId)"
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.SecretAccessKey)"
        echo "::add-mask::$(echo $CREDS | jq -r .Credentials.SessionToken)"
        echo "aws_access_key_id=$(echo $CREDS | jq -r .Credentials.AccessKeyId)" >> $GITHUB_OUTPUT
        echo "aws_secret_access_key=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_OUTPUT
        echo "aws_session_token=$(echo $CREDS | jq -r .Credentials.SessionToken)" >> $GITHUB_OUTPUT
        echo "role_arn=arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole" >> $GITHUB_OUTPUT

    - name: Deploy with Zappa
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        AWS_ACCESS_KEY_ID: ${{ steps.assume_role.outputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ steps.assume_role.outputs.aws_secret_access_key }}
        AWS_SESSION_TOKEN: ${{ steps.assume_role.outputs.aws_session_token }}
        AWS_REGION: ${{ steps.assume_role.outputs.aws_region }}
        HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
      run: |
        # First, ensure we're in the correct directory
        pwd
        ls -la
        
        # Get the correct stage based on branch or PR target
        STAGE=""
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For pull requests, use the target branch
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            STAGE="prod"
          elif [[ "${{ github.base_ref }}" == "test" ]]; then
            STAGE="test"
          elif [[ "${{ github.base_ref }}" == "dev" ]]; then
            STAGE="dev"
          fi
        elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          # For workflow_run events, use the triggering workflow's branch
          if [[ "$HEAD_BRANCH" == "main" ]]; then
            STAGE="prod"
          elif [[ "$HEAD_BRANCH" == "dev" ]]; then
            STAGE="dev"
          elif [[ "$HEAD_BRANCH" == "test" ]]; then
            STAGE="test"
          fi
        else
          # For direct pushes or workflow_dispatch, use the current branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            STAGE="prod"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            STAGE="dev"
          elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            STAGE="test"
          fi
        fi

        if [[ -z "$STAGE" ]]; then
          echo "No valid stage found for this event"
          exit 1
        fi

        echo "Deploying to stage: $STAGE"
                
        # Check if we're in the correct directory with pyproject.toml
        if [ ! -f "pyproject.toml" ]; then
          echo "Error: pyproject.toml not found in current directory"
          exit 1
        fi
        
        if poetry run zappa status $STAGE; then
          echo "Zappa deployment exists. Updating..."
          poetry run zappa update $STAGE
        else
          echo "Zappa deployment does not exist. Performing initial deployment..."
          poetry run zappa deploy $STAGE
        fi

  notify:
    needs: [should_run, deploy_lambda]
    if: always() && needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Check job status
      id: check_job_status
      run: |
        if [[ ${{ needs.deploy_lambda.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check_job_status.outputs.status }}
        text: |
          ${{ steps.check_job_status.outputs.status == 'success' && format('{0} Lambda deployment succeeded! :rocket:', env.ENVIRONMENT) || format('{0} Lambda deployment failed! :x:', env.ENVIRONMENT) }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
