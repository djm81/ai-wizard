name: Build & Push Backend Image

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '!backend/terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '!backend/terraform/**'
      - '.github/workflows/ci-cd-test-build-push-backend.yml'

env:
  ECR_REPOSITORY: ai-wizard
  WORKING_DIRECTORY: backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Set up environment
      run: |
        # Create .env file for production (without SECRET_KEY)
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        
        # Create .env.test file for testing
        echo "DATABASE_URL=${{ vars.TEST_DATABASE_URL }}" >> .env.test
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.test
        # For testing purposes, we'll use a dummy SECRET_KEY
        echo "SECRET_KEY=dummy_secret_key_for_testing" >> .env.test
        
        # Create Firebase config file
        cat <<EOF >> app/config/firebase-adminsdk.json
        ${{ secrets.FIREBASE_ADMINSDK_JSON }}
        EOF
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Run tests
      run: |
        poetry run pytest --cov=app tests/
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Upload coverage data to coveralls.io
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install coveralls
        coveralls --service=github
      working-directory: ${{ env.WORKING_DIRECTORY }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_aws_region }}
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        # role-skip-session-tagging: 'true'
        mask-aws-account-id: 'false'
    
    - name: Get Caller Identity
      run: |
        aws sts get-caller-identity

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Check ECR Login
      run: |
        echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
        if [ -z "${{ steps.login-ecr.outputs.registry }}" ]; then
          echo "ECR login failed"
          exit 1
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Create ECR repository if not exists
      run: |
        if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" --region ${{ vars.TF_VAR_aws_region }}; then
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --region ${{ vars.TF_VAR_aws_region }} --image-scanning-configuration scanOnPush=true --tags Key=Environment,Value=Production || {
            echo "Failed to create ECR repository"
            exit 1
          }
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if ! docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .; then
          echo "Docker build failed"
          exit 1
        fi
        if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG; then
          echo "Docker push failed"
          exit 1
        fi
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}

  notify:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.test.result }} == 'success' && ${{ needs.build-and-push.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: |
          ${{ steps.check.outputs.status == 'success' && 'Test, Build & Push succeeded! :rocket:' || 'Test, Build, or Push failed! :x:' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
