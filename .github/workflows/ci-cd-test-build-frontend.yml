name: Test and Build Frontend

# Ensure serial execution of this workflow across all branches/triggers
concurrency:
  group: frontend-deployment
  cancel-in-progress: false

on:
  workflow_run:
    workflows: ["Deploy Shared Infrastructure"]
    types:
      - completed
    branches:
      - dev
      - test
      - main
  push:
    branches:
    - dev
    - test
    - main
    paths:
    - frontend/**
    - backend/terraform/modules/frontend/**
    - backend/terraform/environments/**
    - .github/workflows/ci-cd-test-build-frontend.yml
  pull_request:
    branches:
    - test
    - main
    paths:
    - frontend/**
    - backend/terraform/modules/frontend/**
    - backend/terraform/environments/**
    - .github/workflows/ci-cd-test-build-frontend.yml
  workflow_dispatch:

env:
  TF_STATE_BUCKET: ai-wizard-terraform-state-${{ vars.TF_VAR_AWS_REGION }}
  WORKING_DIRECTORY: frontend
  ENVIRONMENT: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && 'prod' || github.base_ref) || (github.ref_name == 'main' && 'prod' || github.ref_name) }}
  DOMAIN_NAME: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.base_ref, vars.TF_VAR_DOMAIN_NAME)) || (github.ref_name == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.ref_name, vars.TF_VAR_DOMAIN_NAME)) }}

jobs:
  check_dependencies:
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Check shared infrastructure
      id: check
      run: |
        # Check if triggered by workflow_run
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "can_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            echo "Shared infrastructure deployment failed or not completed"
            exit 1
          fi
        else
          # Initialize Terraform
          cd backend/terraform/environments/${{ env.ENVIRONMENT }}
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
            -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
            -reconfigure

          # Check shared module state using plan with all required variables
          if ! terraform plan \
            -target=module.shared \
            -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
            -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
            -var="domain_name=${{ env.DOMAIN_NAME }}" \
            -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
            -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
            -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
            -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
            -detailed-exitcode > /dev/null 2>&1; then
            echo "Shared infrastructure not in desired state"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "can_proceed=true" >> $GITHUB_OUTPUT
        fi

  should_run:
    needs: check_dependencies
    runs-on: ubuntu-latest
    if: |
      needs.check_dependencies.outputs.can_proceed == 'true' &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request' && github.event.action != 'closed') ||
        (github.event_name == 'push' && (
          github.ref == 'refs/heads/dev' ||
          github.ref == 'refs/heads/test' ||
          github.ref == 'refs/heads/main'
        ))
      )
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
      is_deployable: ${{ steps.check.outputs.deployable }}
    steps:
    - uses: actions/checkout@v4
    - id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "run=true" >> $GITHUB_OUTPUT
          echo "deployable=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "run=true" >> $GITHUB_OUTPUT
          echo "deployable=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          echo "run=true" >> $GITHUB_OUTPUT
          echo "deployable=true" >> $GITHUB_OUTPUT
        else
          echo "run=false" >> $GITHUB_OUTPUT
          echo "deployable=false" >> $GITHUB_OUTPUT
        fi

  test:
    needs: should_run
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          npm-

    - name: Install dependencies
      run: npm ci
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Run tests
      run: npm test
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Create test config
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        cat > .env.test << EOL
        PUBLIC_API_URL=http://localhost:8000
        PUBLIC_FIREBASE_API_KEY=test-api-key
        PUBLIC_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com
        PUBLIC_FIREBASE_PROJECT_ID=test-project
        EOL

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: backend/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Terraform Validate
      id: terraform_validate
      run: |
        terraform validate
      working-directory: backend/terraform/environments/${{ env.ENVIRONMENT }}

  build:
    needs: [should_run, test]
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          npm-

    - name: Install dependencies
      run: npm ci
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Create env file
      run: |
        cat > .env << EOL
        PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
        PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
        PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
        PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
        PUBLIC_API_URL=https://api.${{ env.DOMAIN_NAME }}
        PUBLIC_ENVIRONMENT=${{ env.ENVIRONMENT }}
        EOL
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Build
      run: npm run build
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ${{ env.WORKING_DIRECTORY }}/dist

  deploy:
    needs: [should_run, test, build]
    if: |
      needs.should_run.outputs.run_deployment == 'true' &&
      needs.should_run.outputs.is_deployable == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: backend/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Terraform Plan
      id: terraform_plan
      run: |
        terraform plan \
          -target=module.frontend \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="frontend_bucket_name=${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}" \
          -out=tfplan-frontend-${{ env.ENVIRONMENT }}
      working-directory: backend/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Terraform Apply Frontend Resources
      id: terraform_apply
      run: |
        terraform apply -auto-approve tfplan-frontend-${{ env.ENVIRONMENT }}
      working-directory: backend/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: dist

    - name: Deploy to S3
      run: |
        aws s3 sync dist/ s3://${{ vars.TF_VAR_FRONTEND_BUCKET_NAME }}-${{ env.ENVIRONMENT }} --delete

    - name: Invalidate CloudFront cache
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?contains(@, '${{ env.DOMAIN_NAME }}')]].Id" --output text)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  notify:
    needs: [should_run, test, build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.test.result }} == 'success' && ${{ needs.build.result }} == 'success' && ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: |
          ${{ steps.check.outputs.status == 'success' && format('{0} Frontend deployment succeeded! :rocket:', env.ENVIRONMENT) || format('{0} Frontend deployment failed! :x:', env.ENVIRONMENT) }}
          ${{ steps.check.outputs.status == 'success' && format('Frontend for {0} stage deployed to: https://{1}', env.ENVIRONMENT, env.DOMAIN_NAME) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
