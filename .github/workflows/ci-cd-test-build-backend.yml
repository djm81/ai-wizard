name: Test and Build Backend API

on:
  push:
    branches: 
      - dev
      - test
      - main
    paths:
      - 'backend/**'
      - '!backend/terraform/**'
      - '!backend/aws-setup/**'
      - '.github/workflows/ci-cd-test-build-backend.yml'
  pull_request:
    branches:
      - test  # PR from dev to test
      - main  # PR from test to main
    paths:
      - 'backend/**'
      - '!backend/terraform/**'
      - '!backend/aws-setup/**'
      - '.github/workflows/ci-cd-test-build-backend.yml'
  workflow_dispatch:  # Manual trigger
env:
  WORKING_DIRECTORY: backend
  ENVIRONMENT: ${{ github.ref_name }}

jobs:
  should_run:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request' ||
      (github.event_name == 'push' && (
        github.ref == 'refs/heads/dev' ||
        github.ref == 'refs/heads/test' ||
        github.ref == 'refs/heads/main'
      ))
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Check if any backend files were modified (excluding terraform and aws-setup)
            # git diff --name-only HEAD~1 HEAD | grep -q '^backend/' && \
            # ! git diff --name-only HEAD~1 HEAD | grep -q '^backend/terraform/' && \
            # ! git diff --name-only HEAD~1 HEAD | grep -q '^backend/aws-setup/' && \
            echo "run=true" >> $GITHUB_OUTPUT || echo "run=false" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: should_run
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      id: checkout_repo

    - name: Set up Python
      id: setup_python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      id: install_dependencies
      run: |
        poetry install
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Set up environment
      id: setup_environment
      run: |
        echo "SECRET_KEY=dummy_secret_key_for_testing" >> .env.test
        echo "DYNAMODB_TABLE_NAME=ai-wizard-table-test" >> .env.test
        
        # Create Firebase config file if needed
        if [ ! -e "app/config/firebase-adminsdk.json" ]; then
          echo "Creating Firebase config file 'app/config/firebase-adminsdk.json' ..."
          echo -n '${{ secrets.FIREBASE_ADMINSDK_JSON }}' > app/config/firebase-adminsdk.json
        fi

        # Create Zappa settings file if needed
        if [ ! -e "zappa_settings.json" ]; then
          echo "Creating Zappa settings file 'zappa_settings.json' ..."
          cp zappa_settings.json.example zappa_settings.json
          sed -i 's/##aws_region##/${{ vars.TF_VAR_AWS_REGION }}/g' zappa_settings.json
          sed -i 's;##s3_bucket##;${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }};g' zappa_settings.json
          sed -i 's/##project_name##/ai-wizard/g' zappa_settings.json
          sed -i 's/##lambda_function##/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}/g' zappa_settings.json
          sed -i 's;##role_arn##;arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/ai-wizard-lambda-exec-role-${{ env.ENVIRONMENT }};g' zappa_settings.json
          sed -i 's;##database_url##;${{ vars.TEST_DATABASE_URL }};g' zappa_settings.json
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Run tests
      id: run_tests
      run: |
        poetry run pytest --cov=app tests/
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Upload coverage data to coveralls.io
      id: upload_coverage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        poetry run pip install coveralls
        poetry run coveralls --service=github
      working-directory: ${{ env.WORKING_DIRECTORY }}

  build:
    needs: [should_run, test]
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      id: checkout_repo
      uses: actions/checkout@v4
    
    - name: Set up Python
      id: setup_python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      id: install_dependencies
      run: |
        poetry install
        poetry add zappa
        poetry add setuptools
        poetry export -f requirements.txt --output requirements.txt --without-hashes

        # Create Firebase config file if needed
        if [ ! -e "app/config/firebase-adminsdk.json" ]; then
          echo "Creating Firebase config file 'app/config/firebase-adminsdk.json' ..."
          echo -n '${{ secrets.FIREBASE_ADMINSDK_JSON }}' > app/config/firebase-adminsdk.json
        fi

        # Create Zappa settings file if needed
        if [ ! -e "zappa_settings.json" ]; then
          echo "Creating Zappa settings file 'zappa_settings.json' ..."
          cp zappa_settings.json.example zappa_settings.json
          sed -i 's/##aws_region##/${{ vars.TF_VAR_aws_region }}/g' zappa_settings.json
          sed -i 's;##s3_bucket##;${{ vars.TF_VAR_zappa_deployments_bucket_name }};g' zappa_settings.json
          sed -i 's/##project_name##/ai-wizard/g' zappa_settings.json
          sed -i 's/##lambda_function##/${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}/g' zappa_settings.json
          sed -i 's;##role_arn##;arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/ai-wizard-lambda-exec-role;g' zappa_settings.json
          sed -i 's;##database_url##;${{ vars.PROD_DATABASE_URL }};g' zappa_settings.json
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Configure AWS credentials
      id: configure_aws_credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_aws_region }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'

    - name: Package application
      id: package_app
      run: |
        # Deploy to appropriate stage based on branch
        STAGE=""
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          STAGE="prod"
        elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          STAGE="dev"
        elif [ "${{ github.ref }}" = "refs/heads/test" ]; then
          STAGE="test"
        else
          echo "Invalid branch: ${{ github.ref }}"
          exit 1
        fi

        echo "Packaging for stage: $STAGE"
        poetry run zappa package $STAGE -o lambda_package.zip
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Create S3 bucket if needed
      id: create_s3_bucket
      run: |
        if ! aws s3api head-bucket --bucket ${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }} 2>/dev/null; then
          aws s3api create-bucket --bucket ${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }} --region ${{ vars.TF_VAR_AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ vars.TF_VAR_AWS_REGION }}
          
          # Set public access block configuration
          aws s3api put-public-access-block --bucket ${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }} --public-access-block-configuration '{
            "BlockPublicAcls": true,
            "IgnorePublicAcls": true,
            "BlockPublicPolicy": true,
            "RestrictPublicBuckets": true
          }'
        fi
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Upload package to S3
      id: upload_package
      run: |
        aws s3 cp lambda_package.zip s3://${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }}/lambda_package_${{ github.sha }}.zip
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Set output
      id: set_output
      run: |
        echo "package_s3_uri=s3://${{ vars.TF_VAR_ZAPPA_DEPLOYMENTS_BUCKET_NAME }}-${{ env.ENVIRONMENT }}/lambda_package_${{ github.sha }}.zip" >> $GITHUB_OUTPUT

    outputs:
      package_s3_uri: ${{ steps.set_output.outputs.package_s3_uri }}

  notify:
    needs: [should_run, test, build]
    if: always() && needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.test.result }} == 'success' && ${{ needs.build.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: |
          ${{ steps.check.outputs.status == 'success' && format('{0} Test and Build succeeded! :rocket:', env.ENVIRONMENT) || format('{0} Test or Build failed! :x:', env.ENVIRONMENT) }}
          ${{ steps.check.outputs.status == 'success' && format('Package for {0} stage uploaded to: {1}', env.ENVIRONMENT, needs.build.outputs.package_s3_uri) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
