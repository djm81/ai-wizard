name: Test and Build Backend API

# Ensure serial execution of this workflow across all branches/triggers
concurrency: 
  group: backend-deployment  # Remove ref to make it workflow-specific only
  cancel-in-progress: false  # Wait for running workflow to complete

on:
  workflow_run:
    workflows: ["Deploy Shared Infrastructure"]
    types:
      - completed
    branches:
      - dev
      - test
      - main
  push:
    branches:
    - dev
    - test
    - main
    paths:
    - backend/app/**
    - backend/terraform/modules/**
    - backend/terraform/environments/**
    - .github/workflows/ci-cd-test-build-backend.yml
  pull_request:
    branches:
    - test
    - main
    paths:
    - backend/app/**
    - backend/terraform/modules/**
    - backend/terraform/environments/**
    - .github/workflows/ci-cd-test-build-backend.yml
  workflow_dispatch:

env:
  TF_STATE_BUCKET: ai-wizard-terraform-state-${{ vars.TF_VAR_AWS_REGION }}
  WORKING_DIRECTORY: backend
  ENVIRONMENT: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && 'prod' || github.base_ref) || (github.ref_name == 'main' && 'prod' || github.ref_name) }}
  DOMAIN_NAME: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.base_ref, vars.TF_VAR_DOMAIN_NAME)) || (github.ref_name == 'main' && vars.TF_VAR_DOMAIN_NAME || format('{0}.{1}', github.ref_name, vars.TF_VAR_DOMAIN_NAME)) }}

jobs:
  check_dependencies:
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.check.outputs.can_proceed }}
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
      
    - name: Check shared infrastructure
      id: check
      run: |
        # Check if triggered by workflow_run
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "can_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            echo "Shared infrastructure deployment failed or not completed"
            exit 1
          fi
        else
          # For other triggers, verify shared infrastructure exists
          aws cloudformation describe-stacks \
            --stack-name shared-infrastructure-${{ env.ENVIRONMENT }} \
            --region ${{ vars.TF_VAR_AWS_REGION }} || {
            echo "Shared infrastructure not found"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          }
          echo "can_proceed=true" >> $GITHUB_OUTPUT
        fi

  should_run:
    needs: check_dependencies
    runs-on: ubuntu-latest
    if: |
      needs.check_dependencies.outputs.can_proceed == 'true' &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request' && github.event.action != 'closed') ||
        (github.event_name == 'push' && (
          github.ref == 'refs/heads/dev' ||
          github.ref == 'refs/heads/test' ||
          github.ref == 'refs/heads/main'
        ))
      )
    outputs:
      run_deployment: ${{ steps.check.outputs.run }}
      is_deployable: ${{ steps.check.outputs.deployable }}
    steps:
    - uses: actions/checkout@v4
    - id: check
      run: |
        # Always run for workflow_dispatch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "run=true" >> $GITHUB_OUTPUT
          echo "deployable=true" >> $GITHUB_OUTPUT
        # For PRs, run but don't deploy
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "run=true" >> $GITHUB_OUTPUT
          echo "deployable=false" >> $GITHUB_OUTPUT
        # For pushes to main branches, run and deploy
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          echo "run=true" >> $GITHUB_OUTPUT
          echo "deployable=true" >> $GITHUB_OUTPUT
        else
          echo "run=false" >> $GITHUB_OUTPUT
          echo "deployable=false" >> $GITHUB_OUTPUT
        fi

  test:
    needs: should_run
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      id: checkout_repo

    - name: Set up Python
      id: setup_python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      id: install_dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        poetry install
        poetry add PyYAML

    - name: Set up environment
      id: setup_environment
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Create test environment file .env.test
        cat > .env.test << EOL
        DATABASE_URL=sqlite:///:memory:
        SECRET_KEY=dummy_secret_key_for_testing
        OPENAI_API_KEY=dummy-api-key-for-testing
        OPENAI_MODEL=gpt-4-turbo-preview
        ALLOWED_ORIGINS=https://${{ env.DOMAIN_NAME }},https://api.${{ env.DOMAIN_NAME }}
        EOL

        # Create Firebase config directory and use actual Firebase config from secrets
        mkdir -p app/config
        echo -n '${{ secrets.FIREBASE_ADMINSDK_JSON }}' > app/config/firebase-adminsdk.json

        # Verify Firebase config file exists
        if [ ! -f "app/config/firebase-adminsdk.json" ]; then
          echo "Firebase config file not created correctly"
          exit 1
        fi

        # Show file structure for debugging
        echo "Directory structure:"
        ls -R app/config/

    - name: Run tests
      id: run_tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        PYTHONPATH: ${{ env.WORKING_DIRECTORY }}
        DATABASE_URL: 'sqlite:///:memory:'
        SECRET_KEY: dummy_secret_key_for_testing
        OPENAI_API_KEY: dummy-api-key-for-testing
        OPENAI_MODEL: gpt-4-turbo-preview
        ALLOWED_ORIGINS: https://${{ env.DOMAIN_NAME }},https://api.${{ env.DOMAIN_NAME }}
      run: |
        # Run tests
        poetry run pytest \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          tests/

    - name: Upload coverage data to coveralls.io
      id: upload_coverage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        poetry run pip install coveralls
        poetry run coveralls --service=github

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'
  
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Terraform Validate
      id: terraform_validate
      run: |
        terraform validate
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/environments/${{ env.ENVIRONMENT }}

  build:
    needs: [should_run, test]
    if: needs.should_run.outputs.run_deployment == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies and export requirements
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        poetry install
        poetry export -f requirements.txt --output requirements.txt --without-hashes

        # Create Firebase config directory and file
        mkdir -p app/config
        echo -n '${{ secrets.FIREBASE_ADMINSDK_JSON }}' > app/config/firebase-adminsdk.json

        # Verify Firebase config
        if [ ! -f "app/config/firebase-adminsdk.json" ]; then
          echo "Firebase config file not created correctly"
          exit 1
        fi

    - name: Create Lambda package
      run: |
        # Create necessary directories
        mkdir -p terraform/modules/backend/lambda/app

        # Copy application files to Lambda directory
        cp -r app/* terraform/modules/backend/lambda/app/

        # Create Firebase config directory and file in Lambda package location
        mkdir -p terraform/modules/backend/lambda/app/config
        echo -n '${{ secrets.FIREBASE_ADMINSDK_JSON }}' > terraform/modules/backend/lambda/app/config/firebase-adminsdk.json

        # Verify Firebase config
        if [ ! -f "terraform/modules/backend/lambda/app/config/firebase-adminsdk.json" ]; then
          echo "Firebase config file not created correctly"
          exit 1
        fi

        # Make script executable and run it from its directory
        chmod +x terraform/modules/backend/lambda/create_lambda_package.sh
        cd terraform/modules/backend/lambda
        poetry install  # Ensure poetry is available
        ./create_lambda_package.sh

        # Verify package creation
        if [ ! -f "lambda_package.zip" ]; then
          echo "Lambda package not created correctly"
          exit 1
        fi

        cd ../../../..
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Upload Lambda package
      uses: actions/upload-artifact@v4
      with:
        name: lambda_app_package
        path: ${{ env.WORKING_DIRECTORY }}/terraform/modules/backend/lambda/lambda_package.zip

    - name: Calculate Lambda package hash
      id: lambda_package_hash
      run: |
        HASH=$(openssl dgst -sha256 -binary terraform/modules/backend/lambda/lambda_package.zip | openssl base64)
        echo "lambda_package_hash=${HASH}" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}

  deploy:
    needs: [should_run, test, build]
    if: |
      needs.should_run.outputs.run_deployment == 'true' &&
      needs.should_run.outputs.is_deployable == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.TF_VAR_AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ vars.TF_VAR_AWS_ACCOUNT_ID }}:role/AIWizardDeploymentRole
        mask-aws-account-id: 'false'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      id: terraform_init
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform.tfstate-${{ env.ENVIRONMENT }}" \
          -backend-config="region=${{ vars.TF_VAR_AWS_REGION }}" \
          -reconfigure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Download Lambda package
      uses: actions/download-artifact@v4
      with:
        name: lambda_app_package
        path: ${{ env.WORKING_DIRECTORY }}/terraform/modules/backend/lambda/

    - name: Show Lambda package files
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        ls -lh terraform/modules/backend/lambda/

    - name: Calculate Lambda package hash
      id: lambda_package_hash
      run: |
        HASH=$(openssl dgst -sha256 -binary terraform/modules/backend/lambda/lambda_package.zip | openssl base64)
        echo "lambda_package_hash=${HASH}" >> $GITHUB_OUTPUT
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Plan
      id: terraform_plan
      run: |
        terraform plan \
          -target=module.backend \
          -var="aws_account_id=${{ vars.TF_VAR_AWS_ACCOUNT_ID }}" \
          -var="aws_region=${{ vars.TF_VAR_AWS_REGION }}" \
          -var="domain_name=${{ env.DOMAIN_NAME }}" \
          -var="route53_hosted_zone_id=${{ vars.TF_VAR_ROUTE53_HOSTED_ZONE_ID }}" \
          -var="lambda_function_name_prefix=${{ vars.TF_VAR_LAMBDA_FUNCTION_NAME_PREFIX }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="database_url=${{ vars.PROD_DATABASE_URL }}" \
          -var="lambda_source_code_hash=${{ steps.lambda_package_hash.outputs.lambda_package_hash }}" \
          -out=tfplan-backend-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/environments/${{ env.ENVIRONMENT }}

    - name: Terraform Apply
      id: terraform_apply
      run: |
        terraform apply -auto-approve tfplan-backend-${{ env.ENVIRONMENT }}
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform/environments/${{ env.ENVIRONMENT }}

    outputs:
      lambda_function_name: ${{ steps.terraform_apply.outputs.lambda_function_name }}

  notify:
    needs: [should_run, test, build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check job status
      id: check
      run: |
        if [[ ${{ needs.test.result }} == 'success' && ${{ needs.build.result }} == 'success' && ${{ needs.deploy.result }} == 'success' ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.check.outputs.status }}
        text: |
          ${{ steps.check.outputs.status == 'success' && format('{0} Backend deployment succeeded! :rocket:', env.ENVIRONMENT) || format('{0} Backend deployment failed! :x:', env.ENVIRONMENT) }}
          ${{ steps.check.outputs.status == 'success' && format('Lambda function for {0} stage deployed to: {1}', env.ENVIRONMENT, needs.deploy.outputs.lambda_function_name) || '' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
