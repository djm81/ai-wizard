repos:
  # First: Basic file cleanup
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: detect-private-key

  # Second: Code formatters
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.12
        args: [--config=pyproject.toml]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--settings-path=pyproject.toml]

  # Third: Security checks with logging
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        name: bandit
        entry: bash -c 'mkdir -p logs && bandit -r . -c pyproject.toml -f txt -o logs/bandit.log --severity-level all --confidence-level all --ignore-nosec'
        language: python
        types: [python]
        pass_filenames: false  # Don't pass filenames, let bandit scan recursively
        exclude: ^(tests/|venv/|\.venv/|\.git/|\.pytest_cache/|__pycache__/)

  # Fourth: Linters and validators with logging
  - repo: local
    hooks:
      - id: pylint
        name: pylint
        entry: bash -c 'cd backend && mkdir -p logs && TIMESTAMP=$(date +%Y%m%d_%H%M%S) && echo "Linting Report - $(date)" > "../logs/linting_report_${TIMESTAMP}.log" && echo -e "\n================================================================================\nPyLint Results\n================================================================================\n" >> "../logs/linting_report_${TIMESTAMP}.log" && PYTHONPATH=. pylint app tests scripts >> "../logs/linting_report_${TIMESTAMP}.log"' --
        language: python
        types: [python]
        require_serial: true
        additional_dependencies: [
          'pylint',
          'pyyaml',
          'fastapi',
          'pydantic',
          'pydantic-settings',
          'sqlalchemy',
          'firebase-admin',
          'uvicorn',
          'mangum',
          'email-validator',
          'bcrypt',
          'openai'
        ]
        args: [
          "--rcfile=pyproject.toml",
          "--output-format=text",
          "--msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}",
          "--reports=no"
        ]
        pass_filenames: false
        exclude: |
          (?x)^(
            tests/.*|
            setup\.py|
            docs/.*|
            migrations/.*
          )$

  # Fifth: File type specific checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
        exclude: ^frontend/tsconfig.*\.json$
      - id: check-added-large-files
      - id: debug-statements
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-merge-conflict

  # Sixth: Infrastructure formatters and validators
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.83.5
    hooks:
      - id: terraform_fmt
        args: [--args=-write=true]

  # Last: Custom validation hooks
  - repo: local
    hooks:
      - id: validate-working-directories
        name: Validate Pipeline Working Directories
        entry: python scripts/validate_pipeline_dirs.py
        language: python
        files: ^\.github/workflows/.*\.yml$
        additional_dependencies: ['pyyaml']

      # Add log file aggregator
      - id: add-missing-docstrings
        name: Add Missing Docstrings
        entry: python scripts/add_missing_docstrings.py
        language: python
        types: [python]

      - id: generate-openapi-spec
        name: Generate OpenAPI Specification
        entry: python scripts/generate_openapi_spec.py
        language: python
        files: ^backend/app/.*\.py$
        pass_filenames: false
        additional_dependencies: [
          'pyyaml',
          'fastapi',
          'pydantic',
          'pydantic-settings',
          'sqlalchemy',
          'firebase-admin',
          'uvicorn',
          'mangum',
          'email-validator',
          'bcrypt',
          'openai'
        ]

      - id: check-openapi-version
        name: Check OpenAPI Version
        entry: python scripts/check_openapi_version.py
        language: python
        files: ^backend/app/openapi/specification\.yaml$
        additional_dependencies: ['pyyaml']
